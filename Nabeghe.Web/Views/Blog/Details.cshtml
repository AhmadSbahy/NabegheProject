@using Nabeghe.Application.Statics
@using Nabeghe.Application.Extensions
@model Nabeghe.Domain.Models.Blog.Blog
@{
	ViewData["Title"] = Model.BlogTitle;
}
<div class="max-w-7xl space-y-14 px-4 mx-auto">
	<div class="flex md:flex-nowrap flex-wrap items-start gap-5">
		<div class="md:w-8/12 w-full">
			<div class="relative">
				<!-- article:thumbnail -->
				<div class="relative z-10">
					<img style="width:1000px;height:450px" src="@PathTools.BlogImagePath@Model.BlogImage" class="max-w-full rounded-3xl" alt="...">
				</div>

				<div class="-mt-12 pt-12">
					<div class="bg-gradient-to-b from-background to-secondary rounded-b-3xl space-y-2 p-5 mx-5">
						<!-- article:title -->
						<h1 class="font-bold text-xl text-foreground">@Model.BlogTitle</h1>
					</div>
					<div class="space-y-10 py-5">
						<!-- article:description -->
						<div class="description custom-reset">
							@Html.Raw(Model.BlogDescription)
						</div>

						<!-- end article:description -->
						<!-- article:comments:container -->
						<div class="space-y-5">
							<!-- article:comments:title -->
							<div class="flex items-center gap-3 mb-5">
								<div class="flex items-center gap-1">
									<div class="w-1 h-1 bg-foreground rounded-full"></div>
									<div class="w-2 h-2 bg-foreground rounded-full"></div>
								</div>
								<div class="font-black text-foreground">دیدگاه و پرسش</div>
							</div>
							<!-- end article:comments:container -->
							<!-- article:comments:form:wrapper -->
							@if (User.Identity.IsAuthenticated)
							{
								<partial name="_BlogComment" model="Model" />
							}
							else
							{
								<div class="alert alert-primary">برای ایجاد نظر باید وارد سایت شوید</div>
							}
							<!-- end article:comments:form:wrapper -->
							<!-- article:comments:wrapper -->
							<div class="space-y-3">
								@await Component.InvokeAsync("BlogComment", new { blogId = Model.Id })
							</div>
							<!-- end article:comments:wrapper -->
						</div>
						<!-- end article:comments:container -->
					</div>
				</div>
			</div>
		</div>
		<div class="md:w-4/12 w-full md:sticky md:top-24 space-y-8">
			<div class="space-y-5">
				<div class="flex items-center gap-3">
					<div class="flex items-center gap-1">
						<div class="w-1 h-1 bg-foreground rounded-full"></div>
						<div class="w-2 h-2 bg-foreground rounded-full"></div>
					</div>
					<div class="font-black text-sm text-foreground">نویسنده:</div>
				</div>
				<div class="space-y-3">
					<div class="flex items-center gap-3">
						<div class="flex-shrink-0 w-10 h-10 rounded-full overflow-hidden">
							<img src="@PathTools.GetAvatarPath@Model.User.Avatar" class="w-full h-full object-cover" alt="...">
						</div>
						<div class="flex flex-col items-start space-y-1">
							<a class="line-clamp-1 font-bold text-sm text-foreground hover:text-primary">
								@Model.User.GetUserFullName()
							</a>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>
@section Scripts
{

	<script>
		

		async function AddLike(id) {
			await fetch('/Blog/AddLike', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json'
				},
				body: JSON.stringify({ commentId: id, blogId: @Model.Id })
			})
				.then(response => response.json())
				.then(data => {
					if (data.success) {
						window.location.reload();
					} else if (data.status == 400){
						Swal.fire({
						position: 'top-start',
						icon: 'error',
						title: 'برای پسندیدن نظر باید وارد سایت شوید',
						showConfirmButton: false,
						timer: 2000
					});
					} else {
						console.error("Failed to add like.");
					}
				})
				.catch(error => console.error('Error:', error));
		}



		function replyToComment(commentId) {
			document.getElementById('commentId').value = commentId; // تنظیم commentId
			document.getElementById('commentForm').classList.add('reply-mode');
			document.getElementById('commentText').style.backgroundColor = "#ffaf24";
			setTimeout(() => {
				document.getElementById('commentForm').classList.remove('reply-mode');
				document.getElementById('commentText').style.backgroundColor = '';
			}, 1000);// تغییر رنگ فرم برای حالت پاسخ
			document.getElementById('commentText').placeholder = 'پاسخ خود را وارد کنید ...';
		}


		document.getElementById('commentForm').addEventListener('submit', async function (e) {
			e.preventDefault();

			const courseId = document.getElementById('courseId').value;
			const commentId = document.getElementById('commentId').value;
			const commentText = document.getElementById('commentText').value.trim();

			if (!commentText) {
				Swal.fire({
					position: 'top-start',
					icon: 'warning',
					title: 'لطفاً یک متن وارد کنید.',
					showConfirmButton: false,
					timer: 1500
				});
				return;
			}

			try {
				const url = commentId ? '/Blog/AddReply' : '/Blog/AddComment'; // تعیین URL براساس حالت
				const data = commentId ? { commentId: parseInt(commentId), replyText: commentText } : { blogId: parseInt(courseId), commentText: commentText };

				const response = await fetch(url, {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
						'RequestVerificationToken': '@Html.AntiForgeryToken()'
					},
					body: JSON.stringify(data)
				});

				if (!response.ok) throw new Error('Server error');

				const result = await response.json();

				if (result.success) {
					Swal.fire({
						position: 'top-start',
						icon: 'success',
						title: 'نظر با موفقیت ثبت شد,منتظر تاییدآن توسط مدیران سایت باشید.',
						showConfirmButton: false,
						timer: 2500
					}).then(() => {
						window.location.reload();
					});
					document.getElementById('commentText').value = '';
					document.getElementById('commentId').value = '';
					document.getElementById('commentForm').classList.remove('reply-mode');
					document.getElementById('commentText').placeholder = 'متن مورد نظر خود را وارد کنید ...';
				} else if (result.status == 400){
						Swal.fire({
						position: 'top-start',
						icon: 'error',
						title: 'برای ثبت نظر باید وارد سایت شوید',
						showConfirmButton: false,
						timer: 2000
					});
				}
				else {
					Swal.fire({
						position: 'top-start',
						icon: 'error',
						title: 'خطا در ثبت نظر',
						showConfirmButton: false,
						timer: 1500
					});
				}
			} catch (error) {
				console.error('Error:', error);
				Swal.fire({
					position: 'top-start',
					icon: 'error',
					title: 'خطا در ارتباط با سرور',
					showConfirmButton: false,
					timer: 1500
				});
			}
		});

	</script>
}
